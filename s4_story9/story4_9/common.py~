import story4_9.validation as validation
import story4_9.fare_calculation as fare_cal
import sys
stop_fare1 = [[0, [10, 6], [30,'trip_disc(1,2,0.2)'], 45, 60],
             [50, 0, [60, 40], 80, 70],
             [80, [70,'passenger_disc(1,2,0.5)'], 0, [40,20,30,'trip_disc(2,2,0.2)'], 20],
             [[90,'trip_disc(1,2,0.2)'], 30, 10, 0, [50,'passenger_disc(2,3,0.5)']],
             [100, 20, 5, [60, 20], 0]
             ]
stop_fare=[]

adult_max, adult_min, child_max, child_min=(60,13,12,5)
check_age=0
passenger_travel={}

def passenger_disc(flag,no_time_travel,disc1):
    global check_age
    fare_cal.cal_disc(flag,no_time_travel,disc1,passenger_travel,check_age)


def trip_disc(flag,no_passenger,disc1):

    global check_age
    fare_cal.cal_trip_disc(flag, no_passenger, disc1, check_age)

def adult_child_fare(price,flag,val):
    global check_age
    check_age=flag;
    validation.price=price;
    if (type(val) == list):
        list1=list(filter(lambda x:type(x)==str,val))
        if(list1):
            for func_disc in list1:
                eval(func_disc)
        else:
            print("Total:", price * validation.no_passenger)
    else:
            print("Total:", price * validation.no_passenger)
    validation.entry_stop, validation.exit_stop, validation.age, validation.no_passenger,validation.id_passenger = (0, 0, 0, 0,0)

def make_data_structure():
    with open("passenger.txt",'r') as FH:
        adult_flag = 0
        adult_list = []
        child_flag = 0
        child_list = []
        disc_list =[]
        disc_flag=0
        for line in FH:
            line = line.rstrip()
            if (line == '</adult>'):
                adult_flag = 0
            elif (line == '<adult>'):
                adult_flag = 1
            elif (adult_flag == 1):
                #print("All Adult", line)
                adult_list.append(eval(line))
            elif (line == '</child>'):
                child_flag = 0
            elif (line == '<child>'):
                child_flag = 1
            elif (child_flag == 1):
                #print("All child", line)
                child_list.append(eval(line))
            elif (line == '</discount>'):
                disc_flag = 0
            elif (line == '<discount>'):
                disc_flag = 1
            elif (disc_flag  == 1):
                disc_list.append(eval(line))
            else:
                #print("Wrong line")
                pass;

        #print(adult_list,child_list)

        adult_child_list_final = []

        if(len(adult_list)==(len(child_list))):
            for i in range(len(adult_list)):
                adult_child_list = []
                for adult_val,child_val in zip(adult_list[i],child_list[i]):
                    if(child_val):
                        adult_child_list.append([adult_val,child_val])
                    else:
                        adult_child_list.append(adult_val)
                adult_child_list_final.append(adult_child_list)
            for index_val,dis_val in enumerate(disc_list):
                for index_val1,l in enumerate(dis_val):
                    if(l):
                        if(type(adult_child_list_final[index_val][index_val1])== list):
                            adult_child_list_final[index_val][index_val1].append(l)
                        else:
                            temp=adult_child_list_final[index_val][index_val1]
                            adult_child_list_final[index_val][index_val1]=[]
                            adult_child_list_final[index_val][index_val1].append(temp)
                            adult_child_list_final[index_val][index_val1].append(l)
        else:
            print("File formate was wrong")
    stop_fare=adult_child_list_final
    print("FINALLY CREATED DATA STRUCTURE \n",stop_fare)

def apply_dicount():
    global adult_max, adult_min, child_max, child_min,stop_fare
    stop_fare1.append([1,2])
    stop_fare1.append(2)
    #print(stop_fare1)
    make_data_structure()
   # sys.exit()
    while True:
        if (validation.entry_stop == 0):
            validation.entry_validate()
        if (validation.exit_stop == 0):
            validation.exit_validate()
        if (validation.age == 0):
            validation.age_validate()
        if(validation.no_passenger==0):
            validation.no_of_passenger_validate()
        if (validation.id_passenger == 0):
            validation.get_passenger_validate()
            if (validation.id_passenger in passenger_travel):

                passenger_travel[validation.id_passenger] += 1
            else:
                passenger_travel[validation.id_passenger] = 1
            print(passenger_travel)
        if (int(validation.age) >= int(adult_min)):
            print(stop_fare)
            val = stop_fare[validation.entry_stop - 1][validation.exit_stop - 1]
            if (int(validation.age) <= int(adult_max)):
                if (type(val) == list):
                    adult_child_fare(val[0],1,val)
                else:
                    adult_child_fare(val, 1, val)
            else:
                if (type(val) == list):
                    adult_child_fare(val[0]/2,1,val)
                else:
                    adult_child_fare(val/2, 1, val)
        elif (int(validation.age) <= int(child_max)):
            val = stop_fare[validation.entry_stop - 1][validation.exit_stop - 1]
            if (int(validation.age) >= int(child_min)):
                if(type(val)==list):
                        if(len(val)>=2):
                            if (type(val[1]) == int):
                                adult_child_fare(val[1],2,val)
                            else:
                                adult_child_fare(val[0]/2,2,val)
                        else:
                            adult_child_fare(val[0]/2,2,val)
                else:
                    adult_child_fare(val/2, 2, val)

            else:
                print("Total: 0.0/ ")
                validation.entry_stop, validation.exit_stop, validation.age,validation.no_passenger,validation.id_passenger = (0, 0, 0,0,0)
        else:
            print("Incorrect Entry for age")
            validation.entry_stop, validation.exit_stop, validation.age, validation.no_passenger,validation.id_passenger = (0, 0, 0, 0,0)
